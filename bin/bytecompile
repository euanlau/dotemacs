#!/bin/bash
# Bytecompile all available vendor packages
#
#
# Copyright Fabián Ezequiel Gallina, All Rights Reserved
#
# Permission to use, copy, modify, and distribute this software and
# its documentation for any purpose and without fee is hereby granted,
# provided that the above copyright notice appear in all copies and
# that both that copyright notice and this permission notice appear in
# supporting documentation, and that the name of Fabián Ezequiel
# Gallina not be used in advertising or publicity pertaining to
# distribution of the software without specific, written prior
# permission.
#
# FABIÁN EZEQUIEL GALLINA DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
# SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS, IN NO EVENT SHALL DOUG HELLMANN BE LIABLE FOR ANY SPECIAL,
# INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER
# RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF
# CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
# CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


VENDOR_DIR=$HOME"/.emacs.d/vendor"
cd "$VENDOR_DIR"
PACKAGES=$(find . -maxdepth 1 -type d \( ! -iname "." \) -printf "%f\n")

HELP=""

for package in $PACKAGES; do
    HELP="$HELP
    * $package"
done

HELP="
You should call this script using $0 [options...]

Where valid options are:

    * --all (for all packages)$HELP
"

if [[ -z "$@" || "$@" = "help" ]]; then
    echo "$HELP";
    exit 1;
fi

if [[ "$@" == "--all" ]]; then
    options=$PACKAGES
else
    options="$@"
fi

for option in $options; do
    case "$option" in
        auto-complete)
            (cd auto-complete && make byte-compile);;
        cedet)
            (cd cedet && make);;
        clojure-mode)
            (cd clojure-mode && emacs --batch -L . --eval "(byte-compile-file \"clojure-mode.el\")");;
        coffee-mode)
            (cd coffee-mode && emacs --batch -L . --eval "(byte-compile-file \"coffee-mode.el\")");;
        deft)
            (cd deft && emacs --batch -L . --eval "(byte-compile-file \"deft.el\")");;
        emms)
            pushd emms
            make EMACS="emacs -L ~/.emacs.d/vendor/w3m"
            make emms-print-metadata
            cp src/emms-print-metadata ../../bin/
            popd;;
        full-ack)
            (cd full-ack && emacs --batch -L . --eval "(byte-compile-file \"full-ack.el\")");;
        fuzzy)
            (cd fuzzy && emacs --batch -L . --eval "(byte-compile-file \"fuzzy.el\")");;
        lua-mode)
            (cd lua-mode && make compile);;
        magit)
            (cd magit && make);;
        multi-web-mode)
            (cd multi-web-mode && emacs --batch -L . --eval "(byte-compile-file \"multi-web-mode.el\")");;
        nyan-mode)
            (cd nyan-mode && emacs --batch -L . --eval "(byte-compile-file \"nyan-mode.el\")");;
        org-mode)
            (cd org-mode && make);;
        php-mode)
            (cd php-mode && emacs --batch -L . --eval "(byte-compile-file \"php-mode.el\")");;
        python-mode)
            (cd python-mode && emacs --batch -L . --eval "(byte-compile-file \"python.el\")");;
        popup)
            (cd popup && emacs --batch -L . --eval "(byte-compile-file \"popup.el\")");;
        rainbow-mode)
            (cd rainbow-mode && emacs --batch -L . --eval "(byte-compile-file \"rainbow-mode.el\")");;
        scss-mode)
            (cd scss-mode && emacs --batch -L . --eval "(byte-compile-file \"scss-mode.el\")");;
        smart-tab)
            (cd smart-tab && emacs --batch -L . --eval "(byte-compile-file \"smart-tab.el\")");;
        twittering-mode)
            (cd twittering-mode && emacs --batch -L . --eval "(byte-compile-file \"twittering-mode.el\")");;
        w3m)
            (cd w3m && autoconf && ./configure && make);;
        yaml)
            (cd yaml && make);;
        yasnippet)
            (cd yasnippet && emacs --batch -L . --eval "(and (byte-compile-file \"yasnippet.el\") (byte-compile-file \"dropdown-list.el\"))");;
        zencoding)
            pushd zencoding
            make
            emacs --batch -L . --eval "(and (byte-compile-file \"zencoding-trie.el\") (byte-compile-file \"zencoding-mode.el\"))"
            popd;;
        *) "Warning: compile rule for $option not found";;
    esac
done

echo -e "\nFinished compiling:" $(echo $options)
